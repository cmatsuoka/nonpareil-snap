--- a/SConstruct	2022-11-13 17:10:20.574988694 -0300
+++ b/SConstruct	2022-11-13 18:57:20.482546951 -0300
@@ -27,57 +27,57 @@
 # Options
 #-----------------------------------------------------------------------------
 
-opts = Options (conf_file)
+opts = Variables (conf_file)
 
-opts.AddOptions (EnumOption ('host',
+opts.Add      (EnumVariable ('host',
 			     help = 'host build platform',
 			     allowed_values = ('posix', 'win32'),
 			     default = 'posix',
-			     ignorecase = 1),
+			     ignorecase = 1))
 
-		 EnumOption ('target',
+opts.Add      (EnumVariable ('target',
 			     help = 'execution target platform',
 			     allowed_values = ('posix', 'win32'),
 			     default = 'posix',
-			     ignorecase = 1),
+			     ignorecase = 1))
 
-		 PathOption ('prefix',
+opts.Add      (PathVariable ('prefix',
 			     'installation path prefix',
-			     '/usr/local'),
+			     '/usr/local'))
 
 		 # Don't use PathOption for other paths, because we don't
 		 # require the directories to preexist.
-		 ('bindir',
-		  'path for executable files (default is $prefix/bin)',
-		  ''),
-
-		 ('libdir',
-		  'path for library files (default is $prefix/lib/nonpareil)',
-		  ''),
-
-		 ('destdir',
-		  'installation virtual root directory (for packaging)',
-		  ''),
+opts.Add      ('bindir',
+               'path for executable files (default is $prefix/bin)',
+               '')
+
+opts.Add      ('libdir',
+               'path for library files (default is $prefix/lib/nonpareil)',
+               '')
+
+opts.Add      ('destdir',
+               'installation virtual root directory (for packaging)',
+               '')
 
-		 BoolOption ('debug',
+opts.Add      (BoolVariable ('debug',
 			     help = 'compile for debugging',
-			     default = 1),
+			     default = 1))
 
 		 # Feature switches:
 
-		 BoolOption ('has_debugger_gui',
+opts.Add      (BoolVariable ('has_debugger_gui',
 			     help = 'enable debugger GUI interface',
-			     default = 0),
+			     default = 0))
 
-		 BoolOption ('has_debugger_cli',
+opts.Add      (BoolVariable ('has_debugger_cli',
 			     help = 'enable debugger command-line interface',
-			     default = 0),
+			     default = 0))
 
-		 BoolOption ('use_tcl',
+opts.Add      (BoolVariable ('use_tcl',
 			     help = 'use Tcl as debug command interpreter (only when debugger CLI is enabled)',
-			     default = 1),  # only if has_debugger_cli
+			     default = 1))  # only if has_debugger_cli
 
-		 BoolOption ('use_readline',
+opts.Add      (BoolVariable ('use_readline',
 			     help = 'use Readline library for command editing and history (only when debugger CLI is enabled)',
 			     default = 1))  # only if has_debugger_cli
 
@@ -120,9 +120,9 @@
 
     try:
         os.mkdir (treedir)
-    except OSError, (errnum, strerror):
-        if errnum != errno.EEXIST:
-            print 'mkdir ', treedir, ':', strerror
+    except OSError as err:
+        if err.errnum != errno.EEXIST:
+            print('mkdir ', treedir, ':', err.strerror)
 
     cmd = 'tar cf - '
     #
@@ -137,7 +137,7 @@
 
 def tarballer (target, source, env):            
     cmd = 'tar -czf ' + str (target[0]) +  ' ' + str(source[0])
-    print 'running ', cmd, ' ... '
+    print('running ', cmd, ' ... ')
     p = os.popen (cmd)
     return p.close ()
 
@@ -235,7 +235,7 @@
 # host platform code
 #-----------------------------------------------------------------------------
 
-native_env = env.Copy ()
+native_env = env.Clone ()
 native_env ['build_target_only'] = 0
 SConscript ('src/SConscript',
             build_dir = 'build/' + env ['host'],
@@ -256,7 +256,7 @@
 #-----------------------------------------------------------------------------
 
 if (env ['host'] != env ['target']):
-	cross_build_env = env.Copy ()
+	cross_build_env = env.Clone ()
 	cross_build_env ['build_target_only'] = 1
 	SConscript ('src/SConscript',
 		    build_dir = 'build/' + env ['target'],
--- a/src/SConscript	2022-11-13 18:58:00.538961305 -0300
+++ b/src/SConscript	2022-11-13 18:58:41.687388951 -0300
@@ -79,7 +79,7 @@
 state_io_objs = [build_env.Object(src) for src in state_io_srcs];
 state_io_packages = "gtk+-2.0 gdk-2.0 gdk-pixbuf-2.0 glib-2.0 libxml-2.0"
 
-release_env = build_env.Copy (CPPDEFINES = [('NONPAREIL_RELEASE', build_env ['RELEASE'])])
+release_env = build_env.Clone (CPPDEFINES = [('NONPAREIL_RELEASE', build_env ['RELEASE'])])
 common_objs.append (release_env.Object ('release.c'))
 
 build_env.ParseConfig(pkg_config_cmd + state_io_packages)
@@ -89,7 +89,7 @@
 #-----------------------------------------------------------------------------
 
 if build_env ['build_target_only'] == 0:
-    str2png_env = build_env.Copy ()
+    str2png_env = build_env.Clone ()
 
     str2png_env.Append (CPPDEFINES = [('DEFAULT_PATH', 'image')])
 
@@ -196,7 +196,7 @@
 #-----------------------------------------------------------------------------
 
 if not build_target_only:
-    title_env = native_env.Copy (STR2PNG_STRING = 'NONPAREIL',
+    title_env = native_env.Clone(STR2PNG_STRING = 'NONPAREIL',
                                  STR2PNG_OPTS = '-x 40 -y 44 -m 10')
 
     title_env.STR2PNG (target = 'nonpareil_title',
@@ -205,7 +205,7 @@
     native_env.PNG2C (target = '#build/common/nonpareil_title_png.c',
                       source = 'nonpareil_title.png')
             
-    rgoose_env = native_env.Copy (STR2PNG_STRING = '.',
+    rgoose_env = native_env.Clone(STR2PNG_STRING = '.',
                                   STR2PNG_OPTS = '-x 40 -y 44')
 
     rgoose_env.STR2PNG (target = 'rgoose',
@@ -214,7 +214,7 @@
     native_env.PNG2C (target = '#build/common/rgoose_png.c',
                       source = 'rgoose.png')
             
-    lgoose_env = native_env.Copy (STR2PNG_STRING = ',',
+    lgoose_env = native_env.Clone(STR2PNG_STRING = ',',
                                   STR2PNG_OPTS = '-x 40 -y 44')
 
     lgoose_env.STR2PNG (target = 'lgoose',
@@ -235,7 +235,7 @@
 # nonpareil
 #-----------------------------------------------------------------------------
 
-nonpareil_env = build_env.Copy ()
+nonpareil_env = build_env.Clone ()
 
 nonpareil_srcs = Split ("""proc.c glib_async_queue_source.c
                            about.c goose.c pixbuf_util.c
@@ -284,7 +284,7 @@
 if (not ming) or (cross and not build_target_only):
     nonpareil_env.ParseConfig (sdl_pkg_config_cmd)
 
-csim_env = nonpareil_env.Copy ()
+csim_env = nonpareil_env.Clone ()
 if not ming:
     csim_env.Append (CPPDEFINES = [('DEFAULT_PATH', build_env ['libdir'])])
 
@@ -296,7 +296,7 @@
 
 if build_env ['has_debugger_cli']:
     csim_env.Append (CPPDEFINES = [('HAS_DEBUGGER_CLI', 1)])
-    debugger_cli_env = csim_env.Copy ()
+    debugger_cli_env = csim_env.Clone ()
     if build_env ['use_tcl']:
         debugger_cli_env.Append (CPPDEFINES = [('USE_TCL', 1)])
         nonpareil_env.Append (LIBS = 'tcl')
@@ -325,7 +325,7 @@
 # udis
 #-----------------------------------------------------------------------------
 
-udis_env = build_env.Copy ()
+udis_env = build_env.Clone ()
 
 udis_srcs = Split ("""dis.c""")
 
@@ -336,7 +336,7 @@
 # nsim_conv
 #-----------------------------------------------------------------------------
 
-nsim_conv_env = build_env.Copy ()
+nsim_conv_env = build_env.Clone ()
 
 nsim_conv_srcs = Split ("""nsim_conv.c
 	                   state_read_nsim.c state_write_nsim.c""")
